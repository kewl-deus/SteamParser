package de.dengot.hl2stats.logic;

//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Oct 04 09:20:24 CEST 2005
//----------------------------------------------------

import java.util.ArrayList;
import java.util.List;

import de.dengot.hl2stats.model.Attack;
import de.dengot.hl2stats.model.HL2LogEntry;
import de.dengot.hl2stats.model.Kill;

/**
 * CUP v0.10k generated parser.
 * 
 * @version Tue Oct 04 09:20:24 CEST 2005
 */
public class HL2LogParser extends java_cup.runtime.lr_parser
{

	/** Default constructor. */
	public HL2LogParser()
	{
		super();
	}

	/** Constructor which sets the default scanner. */
	public HL2LogParser(java_cup.runtime.Scanner s)
	{
		super(s);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\012\000\002\002\004\000\002\004\003\000\002\004"
			+ "\004\000\002\003\003\000\002\003\003\000\002\005\035"
			+ "\000\002\006\003\000\002\006\003\000\002\007\011\000"
			+ "\002\010\006" });

	/** Access to production table. */
	public short[][] production_table()
	{
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\053\000\004\021\011\001\002\000\006\002\000\021"
			+ "\011\001\002\000\010\002\ufffb\017\052\021\ufffb\001\002"
			+ "\000\006\002\ufffd\021\ufffd\001\002\000\004\002\051\001"
			+ "\002\000\006\002\ufffa\021\ufffa\001\002\000\004\022\013"
			+ "\001\002\000\006\002\ufffe\021\ufffe\001\002\000\004\005"
			+ "\014\001\002\000\006\007\015\010\016\001\002\000\004"
			+ "\005\022\001\002\000\004\005\017\001\002\000\004\011"
			+ "\020\001\002\000\004\005\021\001\002\000\010\002\ufff9"
			+ "\017\ufff9\021\ufff9\001\002\000\004\011\023\001\002\000"
			+ "\004\005\024\001\002\000\004\017\025\001\002\000\004"
			+ "\012\026\001\002\000\004\005\027\001\002\000\004\020"
			+ "\030\001\002\000\004\017\031\001\002\000\004\013\032"
			+ "\001\002\000\004\005\033\001\002\000\004\020\034\001"
			+ "\002\000\004\017\035\001\002\000\004\014\036\001\002"
			+ "\000\004\005\037\001\002\000\004\020\040\001\002\000"
			+ "\004\017\041\001\002\000\004\015\042\001\002\000\004"
			+ "\005\043\001\002\000\004\020\044\001\002\000\004\017"
			+ "\045\001\002\000\004\016\046\001\002\000\004\005\047"
			+ "\001\002\000\004\020\050\001\002\000\006\002\ufffc\021"
			+ "\ufffc\001\002\000\004\002\001\001\002\000\004\006\053"
			+ "\001\002\000\004\020\054\001\002\000\006\002\ufff8\021"
			+ "\ufff8\001\002\000\004\002\uffff\001\002" });

	/** Access to parse-action table. */
	public short[][] action_table()
	{
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\053\000\016\003\003\004\006\005\011\006\005\007"
			+ "\004\010\007\001\001\000\016\003\003\004\054\005\011"
			+ "\006\005\007\004\010\007\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001" });

	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table()
	{
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$HL2LogParser$actions action_obj;

	/** Action encapsulation object initializer. */
	protected void init_actions()
	{
		action_obj = new CUP$HL2LogParser$actions(this);
	}

	/** Invoke a user supplied parse action. */
	public java_cup.runtime.Symbol do_action(int act_num,
			java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
			throws java.lang.Exception
	{
		/* call code in generated class */
		return action_obj.CUP$HL2LogParser$do_action(act_num, parser, stack,
				top);
	}

	/** Indicates start state. */
	public int start_state()
	{
		return 0;
	}

	/** Indicates start production. */
	public int start_production()
	{
		return 0;
	}

	/** <code>EOF</code> Symbol index. */
	public int EOF_sym()
	{
		return 0;
	}

	/** <code>error</code> Symbol index. */
	public int error_sym()
	{
		return 1;
	}

	public void report_error(String message, Object info)
	{
		StringBuffer m = new StringBuffer("Error ");

		if (info instanceof java_cup.runtime.Symbol)
			m.append("(" + info.toString() + ")");

		m.append(" : " + message);

		System.out.println(m);
	}

	public void report_fatal_error(String message, Object info)
	{
		report_error(message, info);
		throw new RuntimeException("Fatal Syntax Error");
	}

	protected List<Kill> kills = new ArrayList<Kill>();

	protected List<Attack> attacks = new ArrayList<Attack>();

	void addKill(Kill k)
	{
		this.kills.add(k);
	}

	void addAttack(Attack a)
	{
		this.attacks.add(a);
	}

	public List<HL2LogEntry> getLogs()
	{
		List<HL2LogEntry> logs = new ArrayList<HL2LogEntry>();
		logs.addAll(this.kills);
		logs.addAll(this.attacks);
		return logs;
	}

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$HL2LogParser$actions
{
	private final HL2LogParser parser;

	/** Constructor */
	CUP$HL2LogParser$actions(HL2LogParser parser)
	{
		this.parser = parser;
	}

	/** Method with the actual generated action code. */
	public final java_cup.runtime.Symbol CUP$HL2LogParser$do_action(
			int CUP$HL2LogParser$act_num,
			java_cup.runtime.lr_parser CUP$HL2LogParser$parser,
			java.util.Stack CUP$HL2LogParser$stack, int CUP$HL2LogParser$top)
			throws java.lang.Exception
	{
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$HL2LogParser$result;

		/* select the action based on the action number */
		switch (CUP$HL2LogParser$act_num)
		{
		/* . . . . . . . . . . . . . . . . . . . . */
		case 9: // headshot ::= kill OPEN_BRACKET HEADSHOT CLOSE_BRACKET
		{
			Kill RESULT = null;
			int kleft = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 3)).left;
			int kright = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 3)).right;
			Kill k = (Kill) ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 3)).value;

			RESULT = (Kill) k;
			RESULT.setHeadshot(true);
			parser.addKill(RESULT);

			CUP$HL2LogParser$result = new java_cup.runtime.Symbol(
					6/* headshot */,
					((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
							.elementAt(CUP$HL2LogParser$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
							.elementAt(CUP$HL2LogParser$top - 0)).right, RESULT);
		}
			return CUP$HL2LogParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 8: // kill ::= DATE TIME STRING_LITERAL KILLED STRING_LITERAL WITH
				// STRING_LITERAL
		{
			Kill RESULT = null;
			int dateleft = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 6)).left;
			int dateright = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 6)).right;
			java.lang.String date = (java.lang.String) ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 6)).value;
			int timeleft = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 5)).left;
			int timeright = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 5)).right;
			java.lang.String time = (java.lang.String) ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 5)).value;
			int attackerleft = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 4)).left;
			int attackerright = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 4)).right;
			java.lang.String attacker = (java.lang.String) ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 4)).value;
			int victimleft = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 2)).left;
			int victimright = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 2)).right;
			java.lang.String victim = (java.lang.String) ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 2)).value;
			int weaponleft = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 0)).left;
			int weaponright = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 0)).right;
			java.lang.String weapon = (java.lang.String) ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 0)).value;

			RESULT = new Kill(date, time, attacker, victim, weapon);
			parser.addKill(RESULT);

			CUP$HL2LogParser$result = new java_cup.runtime.Symbol(5/* kill */,
					((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
							.elementAt(CUP$HL2LogParser$top - 6)).left,
					((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
							.elementAt(CUP$HL2LogParser$top - 0)).right, RESULT);
		}
			return CUP$HL2LogParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 7: // abstract_kill ::= headshot
		{
			Kill RESULT = null;

			CUP$HL2LogParser$result = new java_cup.runtime.Symbol(
					4/* abstract_kill */,
					((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
							.elementAt(CUP$HL2LogParser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
							.elementAt(CUP$HL2LogParser$top - 0)).right, RESULT);
		}
			return CUP$HL2LogParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 6: // abstract_kill ::= kill
		{
			Kill RESULT = null;

			CUP$HL2LogParser$result = new java_cup.runtime.Symbol(
					4/* abstract_kill */,
					((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
							.elementAt(CUP$HL2LogParser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
							.elementAt(CUP$HL2LogParser$top - 0)).right, RESULT);
		}
			return CUP$HL2LogParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 5: // attack ::= DATE TIME STRING_LITERAL ATTACKED STRING_LITERAL
				// WITH STRING_LITERAL OPEN_BRACKET DAMAGE STRING_LITERAL
				// CLOSE_BRACKET OPEN_BRACKET DAMAGE_ARMOR STRING_LITERAL
				// CLOSE_BRACKET OPEN_BRACKET HEALTH STRING_LITERAL
				// CLOSE_BRACKET OPEN_BRACKET ARMOR STRING_LITERAL CLOSE_BRACKET
				// OPEN_BRACKET HITGROUP STRING_LITERAL CLOSE_BRACKET
		{
			Attack RESULT = null;
			int dateleft = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 26)).left;
			int dateright = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 26)).right;
			java.lang.String date = (java.lang.String) ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 26)).value;
			int timeleft = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 25)).left;
			int timeright = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 25)).right;
			java.lang.String time = (java.lang.String) ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 25)).value;
			int attackerleft = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 24)).left;
			int attackerright = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 24)).right;
			java.lang.String attacker = (java.lang.String) ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 24)).value;
			int victimleft = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 22)).left;
			int victimright = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 22)).right;
			java.lang.String victim = (java.lang.String) ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 22)).value;
			int weaponleft = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 20)).left;
			int weaponright = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 20)).right;
			java.lang.String weapon = (java.lang.String) ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 20)).value;
			int damageleft = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 17)).left;
			int damageright = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 17)).right;
			java.lang.String damage = (java.lang.String) ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 17)).value;
			int damage_armorleft = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 13)).left;
			int damage_armorright = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 13)).right;
			java.lang.String damage_armor = (java.lang.String) ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 13)).value;
			int healthleft = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 9)).left;
			int healthright = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 9)).right;
			java.lang.String health = (java.lang.String) ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 9)).value;
			int armorleft = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 5)).left;
			int armorright = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 5)).right;
			java.lang.String armor = (java.lang.String) ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 5)).value;
			int hitgroupleft = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 1)).left;
			int hitgroupright = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 1)).right;
			java.lang.String hitgroup = (java.lang.String) ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 1)).value;

			RESULT = new Attack(date, time, attacker, victim, weapon, Integer
					.parseInt(damage), Integer.parseInt(damage_armor), Integer
					.parseInt(health), Integer.parseInt(armor), hitgroup);
			parser.addAttack(RESULT);

			CUP$HL2LogParser$result = new java_cup.runtime.Symbol(3/* attack */,
					((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
							.elementAt(CUP$HL2LogParser$top - 26)).left,
					((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
							.elementAt(CUP$HL2LogParser$top - 0)).right, RESULT);
		}
			return CUP$HL2LogParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 4: // logentry ::= abstract_kill
		{
			Object RESULT = null;

			CUP$HL2LogParser$result = new java_cup.runtime.Symbol(
					1/* logentry */,
					((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
							.elementAt(CUP$HL2LogParser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
							.elementAt(CUP$HL2LogParser$top - 0)).right, RESULT);
		}
			return CUP$HL2LogParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 3: // logentry ::= attack
		{
			Object RESULT = null;

			CUP$HL2LogParser$result = new java_cup.runtime.Symbol(
					1/* logentry */,
					((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
							.elementAt(CUP$HL2LogParser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
							.elementAt(CUP$HL2LogParser$top - 0)).right, RESULT);
		}
			return CUP$HL2LogParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 2: // logentries ::= logentry logentries
		{
			List RESULT = null;

			RESULT = parser.getLogs();

			CUP$HL2LogParser$result = new java_cup.runtime.Symbol(
					2/* logentries */,
					((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
							.elementAt(CUP$HL2LogParser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
							.elementAt(CUP$HL2LogParser$top - 0)).right, RESULT);
		}
			return CUP$HL2LogParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 1: // logentries ::= logentry
		{
			List RESULT = null;

			CUP$HL2LogParser$result = new java_cup.runtime.Symbol(
					2/* logentries */,
					((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
							.elementAt(CUP$HL2LogParser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
							.elementAt(CUP$HL2LogParser$top - 0)).right, RESULT);
		}
			return CUP$HL2LogParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 0: // $START ::= logentries EOF
		{
			Object RESULT = null;
			int start_valleft = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 1)).left;
			int start_valright = ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 1)).right;
			List start_val = (List) ((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
					.elementAt(CUP$HL2LogParser$top - 1)).value;
			RESULT = start_val;
			CUP$HL2LogParser$result = new java_cup.runtime.Symbol(0/* $START */,
					((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
							.elementAt(CUP$HL2LogParser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$HL2LogParser$stack
							.elementAt(CUP$HL2LogParser$top - 0)).right, RESULT);
		}
			/* ACCEPT */
			CUP$HL2LogParser$parser.done_parsing();
			return CUP$HL2LogParser$result;

		/* . . . . . . */
		default:
			throw new Exception(
					"Invalid action number found in internal parse table");

		}
	}
}
