package de.dengot.hl2stats.logic;

/* The following code was generated by JFlex 1.4.1 on 04.10.05 09:05 */

/*
 * This class is for scanning hl2 attack log
 */

/* example
 L 10/03/2005 - 21:42:50: "Eric<8><BOT><CT>" attacked "Harold<11><BOT><TERRORIST>" with "m3" (damage "25") (damage_armor "0") (health "75") (armor "0") (hitgroup "stomach")
 */

import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a>
 * 1.4.1 on 04.10.05 09:05 from the specification file
 * <tt>C:/Dokumente und Einstellungen/010627/Lokale Dateien/eclipse/hl2stats/src/hl2log.flex</tt>
 */
public class HL2LogScanner implements HL2LogSymbols, java_cup.runtime.Scanner
{

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;

	/** lexical states */
	public static final int STRING = 1;

	public static final int YYINITIAL = 0;

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0,
			3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,
			28, 0, 0, 0, 0, 32, 26, 27, 0, 0, 0, 3, 0, 5, 4, 4, 4, 4, 4, 4, 4,
			4, 4, 4, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 19, 0, 8, 29,
			10, 13, 12, 31, 18, 16, 15, 0, 11, 22, 17, 30, 21, 24, 0, 20, 25,
			9, 23, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0 };

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\1\1\1\0\1\2\2\3\1\1\7\2\1\4\1\5"
			+ "\1\6\1\7\2\10\1\2\1\11\2\0\1\12\10\0"
			+ "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"
			+ "\1\23\1\24\13\0\1\25\4\0\1\26\6\0\1\27"
			+ "\1\30\1\0\1\31\5\0\1\32\1\0\1\33\1\34" + "\3\0\1\35";

	private static int[] zzUnpackAction()
	{
		int[] result = new int[82];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l)
		{
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\41\0\102\0\143\0\102\0\204\0\245\0\306"
			+ "\0\347\0\u0108\0\u0129\0\u014a\0\u016b\0\102\0\102\0\102"
			+ "\0\u018c\0\u01ad\0\102\0\u01ce\0\102\0\245\0\306\0\u01ef"
			+ "\0\u0210\0\u0231\0\u0252\0\u0273\0\u0294\0\u02b5\0\u02d6\0\u02f7"
			+ "\0\102\0\102\0\102\0\102\0\102\0\102\0\102\0\102"
			+ "\0\102\0\102\0\u0318\0\u0339\0\u035a\0\u037b\0\u039c\0\u03bd"
			+ "\0\u03de\0\u03ff\0\u0420\0\u0441\0\u0462\0\102\0\u0483\0\u04a4"
			+ "\0\u04c5\0\u04e6\0\102\0\u0507\0\u0528\0\u0549\0\u056a\0\u058b"
			+ "\0\u05ac\0\102\0\u05cd\0\u05ee\0\102\0\u060f\0\u0630\0\u0651"
			+ "\0\u0672\0\u0693\0\102\0\u06b4\0\102\0\102\0\u06d5\0\u06f6"
			+ "\0\u0717\0\102";

	private static int[] zzUnpackRowMap()
	{
		int[] result = new int[82];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l)
		{
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\1\3\1\4\2\5\1\6\1\7\1\10\1\3\1\11"
			+ "\2\3\1\12\1\3\1\13\1\14\1\3\1\15\11\3"
			+ "\1\16\1\17\1\20\4\3\1\21\1\22\1\23\4\21"
			+ "\1\24\24\21\1\25\4\21\43\0\1\5\42\0\1\6"
			+ "\1\26\1\27\36\0\1\26\1\30\37\0\1\27\1\0"
			+ "\1\31\43\0\1\32\12\0\1\33\33\0\1\34\31\0"
			+ "\1\35\47\0\1\36\35\0\1\37\2\0\1\40\21\0"
			+ "\1\21\2\0\4\21\1\0\24\21\1\0\4\21\2\0"
			+ "\1\23\36\0\2\41\1\0\4\41\1\42\1\41\1\43"
			+ "\12\41\1\44\7\41\1\45\1\46\1\47\1\50\1\51"
			+ "\4\0\1\30\40\0\1\31\1\0\1\52\43\0\1\53"
			+ "\50\0\1\54\45\0\1\55\33\0\1\56\30\0\1\57"
			+ "\37\0\1\60\41\0\1\61\37\0\1\62\55\0\1\63"
			+ "\41\0\1\64\22\0\1\65\50\0\1\66\35\0\1\67"
			+ "\10\0\1\70\34\0\1\71\30\0\1\72\52\0\1\73"
			+ "\30\0\1\74\46\0\1\75\47\0\1\76\20\0\1\77"
			+ "\53\0\1\100\27\0\1\101\42\0\1\102\37\0\1\103"
			+ "\44\0\1\104\40\0\1\105\45\0\1\106\27\0\1\107"
			+ "\47\0\1\110\42\0\1\111\42\0\1\112\26\0\1\113"
			+ "\33\0\1\114\41\0\1\115\57\0\1\116\34\0\1\117"
			+ "\35\0\1\120\44\0\1\121\37\0\1\122\14\0";

	private static int[] zzUnpackTrans()
	{
		int[] result = new int[1848];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l)
		{
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;

	private static final int ZZ_NO_MATCH = 1;

	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
			"Unkown internal scanner error", "Error: could not match input",
			"Error: pushback value was too large" };

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\1\1\1\0\1\11\1\1\1\11\10\1\3\11\2\1"
			+ "\1\11\1\1\1\11\2\0\1\1\10\0\12\11\13\0"
			+ "\1\11\4\0\1\11\6\0\1\11\1\1\1\0\1\11"
			+ "\5\0\1\11\1\0\2\11\3\0\1\11";

	private static int[] zzUnpackAttribute()
	{
		int[] result = new int[82];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l)
		{
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is the source of
	 * the yytext() string
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the textposition at the last state to be included in yytext */
	private int zzPushbackPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read from
	 * input
	 */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/** the number of characters up to the start of the matched text */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the
	 * matched text
	 */
	private int yycolumn;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/** denotes if the user-EOF-code has already been executed */
	private boolean zzEOFDone;

	/* user code: */
	StringBuffer string = new StringBuffer();

	private Symbol symbol(int type)
	{
		return new SymbolWithPosition(type, yyline + 1, yycolumn + 1, yychar);
	}

	private Symbol symbol(int type, Object value)
	{
		return new SymbolWithPosition(type, yyline + 1, yycolumn + 1, yychar,
				value);
	}

	/**
	 * Creates a new scanner There is also a java.io.InputStream version of this
	 * constructor.
	 * 
	 * @param in
	 *            the java.io.Reader to read input from.
	 */
	public HL2LogScanner(java.io.Reader in)
	{
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner. There is also java.io.Reader version of this
	 * constructor.
	 * 
	 * @param in
	 *            the java.io.Inputstream to read input from.
	 */
	public HL2LogScanner(java.io.InputStream in)
	{
		this(new java.io.InputStreamReader(in));
	}

	/**
	 * Refills the input buffer.
	 * 
	 * @return <code>false</code>, iff there was new input.
	 * 
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException
	{

		/* first: make room (if you can) */
		if (zzStartRead > 0)
		{
			System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead
					- zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzPushbackPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length)
		{
			/* if not: blow it up */
			char newBuffer[] = new char[zzCurrentPos * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
		}

		/* finally: fill the buffer with new input */
		int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length
				- zzEndRead);

		if (numRead < 0)
		{
			return true;
		}
		else
		{
			zzEndRead += numRead;
			return false;
		}
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException
	{
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer */

		if (zzReader != null)
			zzReader.close();
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the
	 * old reader.
	 * 
	 * All internal variables are reset, the old input stream <b>cannot</b> be
	 * reused (internal buffer is discarded and lost). Lexical state is set to
	 * <tt>ZZ_INITIAL</tt>.
	 * 
	 * @param reader
	 *            the new input stream
	 */
	public final void yyreset(java.io.Reader reader)
	{
		zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate()
	{
		return zzLexicalState;
	}

	/**
	 * Enters a new lexical state
	 * 
	 * @param newState
	 *            the new lexical state
	 */
	public final void yybegin(int newState)
	{
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext()
	{
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 * 
	 * @param pos
	 *            the position of the character to fetch. A value from 0 to
	 *            yylength()-1.
	 * 
	 * @return the character at position pos
	 */
	public final char yycharat(int pos)
	{
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength()
	{
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 * 
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and
	 * a match-all fallback rule) this method will only be called with things
	 * that "Can't Possibly Happen". If this method is called, something is
	 * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 * 
	 * Usual syntax/scanner level error handling should be done in error
	 * fallback rules.
	 * 
	 * @param errorCode
	 *            the code of the errormessage to display
	 */
	private void zzScanError(int errorCode)
	{
		String message;
		try
		{
			message = ZZ_ERROR_MSG[errorCode];
		}
		catch (ArrayIndexOutOfBoundsException e)
		{
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * 
	 * They will be read again by then next call of the scanning method
	 * 
	 * @param number
	 *            the number of characters to be read again. This number must
	 *            not be greater than yylength()!
	 */
	public void yypushback(int number)
	{
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}

	/**
	 * Contains user EOF-code, which will be executed exactly once, when the end
	 * of file is reached
	 */
	private void zzDoEOF() throws java.io.IOException
	{
		if (!zzEOFDone)
		{
			zzEOFDone = true;
			yyclose();
		}
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of
	 * input is encountered or an I/O-Error occurs.
	 * 
	 * @return the next token
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	public java_cup.runtime.Symbol next_token() throws java.io.IOException
	{
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true)
		{
			zzMarkedPosL = zzMarkedPos;

			yychar += zzMarkedPosL - zzStartRead;

			boolean zzR = false;
			for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++)
			{
				switch (zzBufferL[zzCurrentPosL])
				{
				case '\u000B':
				case '\u000C':
				case '\u0085':
				case '\u2028':
				case '\u2029':
					yyline++;
					yycolumn = 0;
					zzR = false;
					break;
				case '\r':
					yyline++;
					yycolumn = 0;
					zzR = true;
					break;
				case '\n':
					if (zzR)
						zzR = false;
					else
					{
						yyline++;
						yycolumn = 0;
					}
					break;
				default:
					zzR = false;
					yycolumn++;
				}
			}

			if (zzR)
			{
				// peek one character ahead if it is \n (if we have counted one
				// line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL)
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				else if (zzAtEOF)
					zzPeek = false;
				else
				{
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof)
						zzPeek = false;
					else
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				}
				if (zzPeek)
					yyline--;
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = zzLexicalState;

			zzForAction:
			{
				while (true)
				{

					if (zzCurrentPosL < zzEndReadL)
						zzInput = zzBufferL[zzCurrentPosL++];
					else if (zzAtEOF)
					{
						zzInput = YYEOF;
						break zzForAction;
					}
					else
					{
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof)
						{
							zzInput = YYEOF;
							break zzForAction;
						}
						else
						{
							zzInput = zzBufferL[zzCurrentPosL++];
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1)
						break zzForAction;
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1)
					{
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
							break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction])
			{
			case 19:
			{
				string.append('\'');
			}
			case 30:
				break;
			case 10:
			{
				return symbol(DATE, yytext());
			}
			case 31:
				break;
			case 1:
			{
				return symbol(NUMBER, new Integer(yytext()));
			}
			case 32:
				break;
			case 29:
			{
				return symbol(DAMAGE_ARMOR);
			}
			case 33:
				break;
			case 7:
			{
				string.append(yytext());
			}
			case 34:
				break;
			case 2:
			{
				throw new RuntimeException("Illegal character \"" + yytext()
						+ "\" at line " + yyline + ", column " + yycolumn);
			}
			case 35:
				break;
			case 14:
			{
				string.append('\r');
			}
			case 36:
				break;
			case 22:
			{
				return symbol(ARMOR);
			}
			case 37:
				break;
			case 8:
			{
				throw new RuntimeException("Unterminated string at end of line");
			}
			case 38:
				break;
			case 26:
			{
				return symbol(ATTACKED);
			}
			case 39:
				break;
			case 16:
			{
				string.append('\b');
			}
			case 40:
				break;
			case 28:
			{
				return symbol(HITGROUP);
			}
			case 41:
				break;
			case 20:
			{
				return symbol(TIME, yytext());
			}
			case 42:
				break;
			case 9:
			{
				yybegin(YYINITIAL);
				return symbol(STRING_LITERAL, string.toString());
			}
			case 43:
				break;
			case 13:
			{
				string.append('\t');
			}
			case 44:
				break;
			case 23:
			{
				return symbol(KILLED);
			}
			case 45:
				break;
			case 11:
			{
				throw new RuntimeException("Illegal escape sequence \""
						+ yytext() + "\"");
			}
			case 46:
				break;
			case 12:
			{
				string.append('\\');
			}
			case 47:
				break;
			case 4:
			{
				return symbol(OPEN_BRACKET);
			}
			case 48:
				break;
			case 6:
			{
				yybegin(STRING);
				string.setLength(0);
			}
			case 49:
				break;
			case 5:
			{
				return symbol(CLOSE_BRACKET);
			}
			case 50:
				break;
			case 21:
			{
				return symbol(WITH);
			}
			case 51:
				break;
			case 17:
			{
				string.append('\n');
			}
			case 52:
				break;
			case 24:
			{
				return symbol(DAMAGE);
			}
			case 53:
				break;
			case 18:
			{
				string.append('\f');
			}
			case 54:
				break;
			case 27:
			{
				return symbol(HEADSHOT);
			}
			case 55:
				break;
			case 3:
			{ /* ignore */
			}
			case 56:
				break;
			case 15:
			{
				string.append('\"');
			}
			case 57:
				break;
			case 25:
			{
				return symbol(HEALTH);
			}
			case 58:
				break;
			default:
				if (zzInput == YYEOF && zzStartRead == zzCurrentPos)
				{
					zzAtEOF = true;
					zzDoEOF();
					{
						return symbol(EOF);
					}
				}
				else
				{
					zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}

	/**
	 * Converts an int token code into the name of the token by reflection on
	 * the cup symbol class/interface sym
	 * 
	 * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
	 */
	private String getTokenName(int token)
	{
		try
		{
			java.lang.reflect.Field[] classFields = HL2LogSymbols.class
					.getFields();
			for (int i = 0; i < classFields.length; i++)
			{
				if (classFields[i].getInt(null) == token)
				{
					return classFields[i].getName();
				}
			}
		}
		catch (Exception e)
		{
			e.printStackTrace(System.err);
		}

		return "UNKNOWN TOKEN";
	}

	/**
	 * Same as next_token but also prints the token to standard out for
	 * debugging.
	 * 
	 * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
	 */
	public java_cup.runtime.Symbol debug_next_token()
			throws java.io.IOException
	{
		java_cup.runtime.Symbol s = next_token();
		System.out.println("line:" + (yyline + 1) + " col:" + (yycolumn + 1)
				+ " --" + yytext() + "--" + getTokenName(s.sym) + "--");
		return s;
	}

	/**
	 * Runs the scanner on input files.
	 * 
	 * This main method is the debugging routine for the scanner. It prints
	 * debugging information about each returned token to System.out until the
	 * end of file is reached, or an error occured.
	 * 
	 * @param argv
	 *            the command line, contains the filenames to run the scanner
	 *            on.
	 */
	public static void main(String argv[])
	{
		if (argv.length == 0)
		{
			System.out.println("Usage : java HL2LogScanner <inputfile>");
		}
		else
		{
			for (int i = 0; i < argv.length; i++)
			{
				HL2LogScanner scanner = null;
				try
				{
					scanner = new HL2LogScanner(new java.io.FileReader(argv[i]));
					while (!scanner.zzAtEOF)
						scanner.debug_next_token();
				}
				catch (java.io.FileNotFoundException e)
				{
					System.out.println("File not found : \"" + argv[i] + "\"");
				}
				catch (java.io.IOException e)
				{
					System.out.println("IO error scanning file \"" + argv[i]
							+ "\"");
					System.out.println(e);
				}
				catch (Exception e)
				{
					System.out.println("Unexpected exception:");
					e.printStackTrace();
				}
			}
		}
	}

}
